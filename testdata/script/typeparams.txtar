! exec unparam .
cmp stderr stderr.golden
cmp stdout stdout.golden

-- stderr.golden --
-- stdout.golden --
foo.go:39:38: (Tuple[T1, T2]).unusedGeneric - t1 is unused
foo.go:57:17: g1 - v is unused
foo.go:60:21: g2 - v is unused
foo.go:63:18: g1s - v is unused
foo.go:66:22: g2s - v is unused
foo.go:69:18: g1a - v is unused
foo.go:72:22: g2a - v is unused
foo.go:75:18: g1p - v is unused
foo.go:78:22: g2p - v is unused
foo.go:81:23: g1struct - v is unused
foo.go:86:17: nonGeneric - v is unused
foo.go:89:42: (GenericType1[T1]).genericMethod - v is unused
-- go.mod --
module testdata.tld/foo

go 1.18
-- foo.go --
package foo

var DoWork func()

func GenericFunc[GenericParamA, B any](x GenericParamA, y B) {}

type GenericVector[GenericParamT any] []GenericParamT

type GenericGraph[T any] struct {
	Content T
	Edges []GenericGraph[T]
}

type PredeclaredSignedInteger interface {
	int | int8 | int16 | int32 | int64
}

type StringableSignedInteger interface {
	~int | ~int8 | ~int16 | ~int32 | ~int64

	String() string
}

type CombineEmbeds interface {
	string | int

	interface { EmbeddedMethod() }
	RegularMethod()
}

type Tuple[T1 any, T2 any] struct {
	left  T1
	right T2
}

func (t Tuple[T1, T2]) Left() T1  { return t.left }
func (t Tuple[T1, T2]) Right() T2 { return t.right }

func (t Tuple[T1, T2]) unusedGeneric(t1 T1, t2 T2) T2 {
	DoWork()
	return t2
}

// otherwise Tuple isn't reachable.
var Sink interface{} = new(Tuple[int, string])

// The different number of type parameters result in different receiver AST
// nodes on methods: IndexExpr and IndexListExpr.
type GenericType1[T1 any] []T1
type GenericType2[T1 any, T2 any] struct {
	t1 T1
	t2 T2
}

// must be able to handle parameters which are not themselves type parameters,
// but have type parameters embedded within them
func g1[T1 any](v GenericType1[T1]) {
	DoWork()
}
func g2[T1, T2 any](v GenericType2[T1, T2]) {
	DoWork()
}
func g1s[T1 any](v []GenericType1[T1]) {
	DoWork()
}
func g2s[T1, T2 any](v []GenericType2[T1, T2]) {
	DoWork()
}
func g1a[T1 any](v [2]GenericType1[T1]) {
	DoWork()
}
func g2a[T1, T2 any](v [2]GenericType2[T1, T2]) {
	DoWork()
}
func g1p[T1 any](v *GenericType1[T1]) {
	DoWork()
}
func g2p[T1, T2 any](v *GenericType2[T1, T2]) {
	DoWork()
}
func g1struct[T1 any](v struct{f GenericType1[T1]}) {
	DoWork()
}

// test logic to skip non-generic functions/methods
func nonGeneric(v any) {
	DoWork()
}
func (g1 GenericType1[T1]) genericMethod(v any) {
	DoWork()
}

// make sure nonGeneric & genericMethod are reachable
func Expose() {
	nonGeneric(nil)
	(GenericType1[any])(nil).genericMethod(nil)
}

-- foo_main.go --
//+build !other

package foo

func (g *GenericType1[T1]) multImplsMethodGeneric(f1 T1) {
	DoWork()
}

func (g GenericType2[T1, T2]) multImplsMethodGeneric(f1 T1, f2 T2) T2 {
	DoWork()
	return f2
}
-- foo_other.go --
//+build other

package foo

func (g *GenericType1[T1]) multImplsMethodGeneric(f1 T1) {
	DoWork()
}

func (g GenericType2[T1, T2]) multImplsMethodGeneric(f1 T1, f2 T2) T2 {
	DoWork()
	return f2
}
